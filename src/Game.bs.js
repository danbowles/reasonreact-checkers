// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Logic$ReactHooksTemplate = require("./Logic.bs.js");
var BoardRow$ReactHooksTemplate = require("./BoardRow.bs.js");

var initialState_000 = /* checkerBoard */Logic$ReactHooksTemplate.Logic[/* buildBoard */2](/* () */0);

var initialState_001 = /* gameState : Playing */Block.__(0, [/* Red */1]);

var initialState = /* record */[
  initialState_000,
  initialState_001
];

var gameOuter_000 = Css.border(Css.px(4), Css.solid, Css.hex("236253"));

var gameOuter_001 = /* :: */[
  Css.width(Css.px(400)),
  /* [] */0
];

var gameOuter = /* :: */[
  gameOuter_000,
  gameOuter_001
];

function Game(Props) {
  var match = React.useReducer((function (state, action) {
          if (action.tag) {
            var gamePieceToMove = action[0];
            var match = List.find((function (gamePiece) {
                    var match = gamePiece[/* gamePieceState */4];
                    if (typeof match === "number") {
                      return match === 1;
                    } else {
                      return false;
                    }
                  }), List.flatten(List.map((function (row) {
                            return row[/* gamePieces */1];
                          }), state[/* checkerBoard */0])));
            var moveToY = gamePieceToMove[/* y */2];
            var moveToX = gamePieceToMove[/* x */1];
            var selY = match[/* y */2];
            var selX = match[/* x */1];
            var updatedBoard = List.map((function (row) {
                    return /* record */[
                            /* id */row[/* id */0],
                            /* gamePieces */List.map((function (field) {
                                    var fieldY = field[/* y */2];
                                    var fieldX = field[/* x */1];
                                    if (fieldX === selX && fieldY === selY) {
                                      return /* record */[
                                              /* id */field[/* id */0],
                                              /* x */field[/* x */1],
                                              /* y */field[/* y */2],
                                              /* player : Empty */2,
                                              /* gamePieceState : Default */0,
                                              /* kingStatus */field[/* kingStatus */5]
                                            ];
                                    } else if (fieldX === moveToX && fieldY === moveToY) {
                                      var match = state[/* gameState */1];
                                      var tmp;
                                      tmp = match.tag || match[0] !== 1 ? /* White */0 : /* Red */1;
                                      return /* record */[
                                              /* id */field[/* id */0],
                                              /* x */field[/* x */1],
                                              /* y */field[/* y */2],
                                              /* player */tmp,
                                              /* gamePieceState : Default */0,
                                              /* kingStatus */field[/* kingStatus */5]
                                            ];
                                    } else {
                                      return /* record */[
                                              /* id */field[/* id */0],
                                              /* x */field[/* x */1],
                                              /* y */field[/* y */2],
                                              /* player */field[/* player */3],
                                              /* gamePieceState : Default */0,
                                              /* kingStatus */field[/* kingStatus */5]
                                            ];
                                    }
                                  }), row[/* gamePieces */1])
                          ];
                  }), state[/* checkerBoard */0]);
            var match$1 = state[/* gameState */1];
            var tmp;
            if (match$1.tag) {
              throw [
                    Caml_builtin_exceptions.match_failure,
                    /* tuple */[
                      "Game.re",
                      199,
                      21
                    ]
                  ];
            } else {
              switch (match$1[0]) {
                case 0 : 
                    tmp = /* Playing */Block.__(0, [/* Red */1]);
                    break;
                case 1 : 
                    tmp = /* Playing */Block.__(0, [/* White */0]);
                    break;
                case 2 : 
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "Game.re",
                            199,
                            21
                          ]
                        ];
                
              }
            }
            return /* record */[
                    /* checkerBoard */updatedBoard,
                    /* gameState */tmp
                  ];
          } else {
            var selectedPiece = action[0];
            var match$2 = selectedPiece[/* player */3];
            var match$3 = state[/* gameState */1];
            var exit = 0;
            switch (match$2) {
              case 0 : 
                  if (match$3.tag || match$3[0] !== 1) {
                    exit = 1;
                  } else {
                    return state;
                  }
                  break;
              case 1 : 
                  if (match$3.tag || match$3[0] !== 0) {
                    exit = 1;
                  } else {
                    return state;
                  }
                  break;
              case 2 : 
                  exit = 1;
                  break;
              
            }
            if (exit === 1) {
              var gameState = state[/* gameState */1];
              var checkerBoard = state[/* checkerBoard */0];
              var selState = selectedPiece[/* gamePieceState */4];
              var selY$1 = selectedPiece[/* y */2];
              var selX$1 = selectedPiece[/* x */1];
              var adjecentSlideMoves_000 = /* tuple */[
                selX$1 + 1 | 0,
                selY$1 + 1 | 0
              ];
              var adjecentSlideMoves_001 = /* :: */[
                /* tuple */[
                  selX$1 + 1 | 0,
                  selY$1 - 1 | 0
                ],
                /* :: */[
                  /* tuple */[
                    selX$1 - 1 | 0,
                    selY$1 + 1 | 0
                  ],
                  /* :: */[
                    /* tuple */[
                      selX$1 - 1 | 0,
                      selY$1 - 1 | 0
                    ],
                    /* [] */0
                  ]
                ]
              ];
              var adjecentSlideMoves = /* :: */[
                adjecentSlideMoves_000,
                adjecentSlideMoves_001
              ];
              var adjacentJumpMoves_000 = /* tuple */[
                /* tuple */[
                  selX$1 + 1 | 0,
                  selY$1 + 1 | 0
                ],
                /* tuple */[
                  selX$1 + 2 | 0,
                  selY$1 + 2 | 0
                ]
              ];
              var adjacentJumpMoves_001 = /* :: */[
                /* tuple */[
                  /* tuple */[
                    selX$1 + 1 | 0,
                    selY$1 - 1 | 0
                  ],
                  /* tuple */[
                    selX$1 + 2 | 0,
                    selY$1 - 2 | 0
                  ]
                ],
                /* :: */[
                  /* tuple */[
                    /* tuple */[
                      selX$1 - 1 | 0,
                      selY$1 + 1 | 0
                    ],
                    /* tuple */[
                      selX$1 - 2 | 0,
                      selY$1 + 2 | 0
                    ]
                  ],
                  /* :: */[
                    /* tuple */[
                      /* tuple */[
                        selX$1 - 1 | 0,
                        selY$1 - 1 | 0
                      ],
                      /* tuple */[
                        selX$1 - 2 | 0,
                        selY$1 - 2 | 0
                      ]
                    ],
                    /* [] */0
                  ]
                ]
              ];
              var adjacentJumpMoves = /* :: */[
                adjacentJumpMoves_000,
                adjacentJumpMoves_001
              ];
              var kingStatus = selectedPiece[/* kingStatus */5];
              var validSlides = List.filter((function (param) {
                        var id = String(param[0]) + String(param[1]);
                        var foundField = List.find((function (gamePiece) {
                                return id === gamePiece[/* id */0];
                              }), List.flatten(List.map((function (row) {
                                        return row[/* gamePieces */1];
                                      }), checkerBoard)));
                        var match = foundField[/* player */3];
                        return match >= 2;
                      }))(List.filter((function (param) {
                            var y = param[1];
                            var exit = 0;
                            if (gameState.tag) {
                              exit = 1;
                            } else {
                              switch (gameState[0]) {
                                case 0 : 
                                    if (kingStatus) {
                                      return y < selY$1;
                                    } else {
                                      exit = 1;
                                    }
                                    break;
                                case 1 : 
                                    if (kingStatus) {
                                      return y > selY$1;
                                    } else {
                                      exit = 1;
                                    }
                                    break;
                                case 2 : 
                                    exit = 1;
                                    break;
                                
                              }
                            }
                            if (exit === 1) {
                              if (kingStatus) {
                                return false;
                              } else {
                                return y < selY$1;
                              }
                            }
                            
                          }))(List.filter((function (param) {
                                var y = param[1];
                                var x = param[0];
                                if (x !== -1 && y !== -1 && x !== List.length(state[/* checkerBoard */0])) {
                                  return y !== List.length(state[/* checkerBoard */0]);
                                } else {
                                  return false;
                                }
                              }))(adjecentSlideMoves)));
              var validSingleJumps = List.filter((function (param) {
                        var match = param[1];
                        var id = String(match[0]) + String(match[1]);
                        var foundField = List.find((function (gamePiece) {
                                return id === gamePiece[/* id */0];
                              }), List.flatten(List.map((function (row) {
                                        return row[/* gamePieces */1];
                                      }), checkerBoard)));
                        var match$1 = foundField[/* player */3];
                        return match$1 >= 2;
                      }))(List.filter((function (param) {
                            var match = param[0];
                            var id = String(match[0]) + String(match[1]);
                            var foundField = List.find((function (gamePiece) {
                                    return id === gamePiece[/* id */0];
                                  }), List.flatten(List.map((function (row) {
                                            return row[/* gamePieces */1];
                                          }), checkerBoard)));
                            var match$1 = foundField[/* player */3];
                            switch (match$1) {
                              case 0 : 
                                  if (gameState.tag) {
                                    return false;
                                  } else {
                                    return gameState[0] === 1;
                                  }
                              case 1 : 
                                  if (gameState.tag) {
                                    return false;
                                  } else {
                                    return gameState[0] === 0;
                                  }
                              case 2 : 
                                  return false;
                              
                            }
                          }))(List.filter((function (param) {
                                var y = param[0][1];
                                var exit = 0;
                                if (gameState.tag) {
                                  exit = 1;
                                } else {
                                  switch (gameState[0]) {
                                    case 0 : 
                                        if (kingStatus) {
                                          return y < selY$1;
                                        } else {
                                          exit = 1;
                                        }
                                        break;
                                    case 1 : 
                                        if (kingStatus) {
                                          return y > selY$1;
                                        } else {
                                          exit = 1;
                                        }
                                        break;
                                    case 2 : 
                                        exit = 1;
                                        break;
                                    
                                  }
                                }
                                if (exit === 1) {
                                  if (kingStatus) {
                                    return false;
                                  } else {
                                    return y < selY$1;
                                  }
                                }
                                
                              }))(List.filter((function (param) {
                                    var match = param[0];
                                    var y = match[1];
                                    var x = match[0];
                                    if (x !== -1 && y !== -1 && x !== List.length(state[/* checkerBoard */0])) {
                                      return y !== List.length(state[/* checkerBoard */0]);
                                    } else {
                                      return false;
                                    }
                                  }))(adjacentJumpMoves))));
              console.log(validSingleJumps);
              var updatedBoard$1 = List.map((function (row) {
                      return /* record */[
                              /* id */row[/* id */0],
                              /* gamePieces */List.map((function (field) {
                                      var fieldState = field[/* gamePieceState */4];
                                      var fieldY = field[/* y */2];
                                      var fieldX = field[/* x */1];
                                      var exit = 0;
                                      var exit$1 = 0;
                                      if (typeof fieldState === "number" && fieldState === 0) {
                                        var tmp;
                                        try {
                                          List.find((function (param) {
                                                  var match = param[1];
                                                  var match$1 = param[0];
                                                  if (match[0] === match$1[0]) {
                                                    return match[1] === match$1[1];
                                                  } else {
                                                    return false;
                                                  }
                                                }), validSingleJumps);
                                          tmp = true;
                                        }
                                        catch (exn){
                                          if (exn === Caml_builtin_exceptions.not_found) {
                                            tmp = false;
                                          } else {
                                            throw exn;
                                          }
                                        }
                                        if (tmp) {
                                          return /* record */[
                                                  /* id */field[/* id */0],
                                                  /* x */field[/* x */1],
                                                  /* y */field[/* y */2],
                                                  /* player */field[/* player */3],
                                                  /* gamePieceState : ValidMove */2,
                                                  /* kingStatus */field[/* kingStatus */5]
                                                ];
                                        } else {
                                          var tmp$1;
                                          try {
                                            List.find((function (param) {
                                                    if (param[0] === fieldX) {
                                                      return param[1] === fieldY;
                                                    } else {
                                                      return false;
                                                    }
                                                  }), validSlides);
                                            tmp$1 = true;
                                          }
                                          catch (exn$1){
                                            if (exn$1 === Caml_builtin_exceptions.not_found) {
                                              tmp$1 = false;
                                            } else {
                                              throw exn$1;
                                            }
                                          }
                                          if (tmp$1) {
                                            return /* record */[
                                                    /* id */field[/* id */0],
                                                    /* x */field[/* x */1],
                                                    /* y */field[/* y */2],
                                                    /* player */field[/* player */3],
                                                    /* gamePieceState : ValidMove */2,
                                                    /* kingStatus */field[/* kingStatus */5]
                                                  ];
                                          } else {
                                            exit$1 = 2;
                                          }
                                        }
                                      } else {
                                        exit$1 = 2;
                                      }
                                      if (exit$1 === 2) {
                                        if (typeof selState === "number" && !(selState !== 0 || !(fieldX === selX$1 && fieldY === selY$1))) {
                                          return /* record */[
                                                  /* id */field[/* id */0],
                                                  /* x */field[/* x */1],
                                                  /* y */field[/* y */2],
                                                  /* player */field[/* player */3],
                                                  /* gamePieceState : Selected */1,
                                                  /* kingStatus */field[/* kingStatus */5]
                                                ];
                                        } else {
                                          exit = 1;
                                        }
                                      }
                                      if (exit === 1) {
                                        return /* record */[
                                                /* id */field[/* id */0],
                                                /* x */field[/* x */1],
                                                /* y */field[/* y */2],
                                                /* player */field[/* player */3],
                                                /* gamePieceState : Default */0,
                                                /* kingStatus */field[/* kingStatus */5]
                                              ];
                                      }
                                      
                                    }), row[/* gamePieces */1])
                            ];
                    }), checkerBoard);
              return /* record */[
                      /* checkerBoard */updatedBoard$1,
                      /* gameState */state[/* gameState */1]
                    ];
            }
            
          }
        }), initialState);
  var state = match[0];
  var dispatch = match[1];
  var match$1 = state[/* gameState */1];
  var tmp;
  if (match$1.tag) {
    tmp = "Someone Won!";
  } else {
    switch (match$1[0]) {
      case 0 : 
          tmp = "White";
          break;
      case 1 : 
          tmp = "Red";
          break;
      case 2 : 
          tmp = "Someone Won!";
          break;
      
    }
  }
  return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement("h3", undefined, "Turn: ", tmp)), React.createElement("div", {
                  className: Css.style(gameOuter)
                }, $$Array.of_list(List.map((function (row) {
                            return React.createElement(BoardRow$ReactHooksTemplate.make, {
                                        rowIndex: row[/* id */0],
                                        onSelectGamePiece: (function (gamePiece) {
                                            return Curry._1(dispatch, /* SelectedGamePiece */Block.__(0, [gamePiece]));
                                          }),
                                        onSlideGamePiece: (function (gamePiece) {
                                            return Curry._1(dispatch, /* SlideGamePiece */Block.__(1, [gamePiece]));
                                          }),
                                        row: row[/* gamePieces */1],
                                        key: String(row[/* id */0])
                                      });
                          }), state[/* checkerBoard */0]))));
}

var make = Game;

exports.initialState = initialState;
exports.gameOuter = gameOuter;
exports.make = make;
/* initialState Not a pure module */
