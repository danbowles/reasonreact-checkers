// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function range(start, end_) {
  if (start >= end_) {
    return /* [] */0;
  } else {
    return /* :: */[
            start,
            range(start + 1 | 0, end_)
          ];
  }
}

var boardSize = range(0, 8);

function getGamePiece(x, y, player) {
  return /* record */[
          /* id */String(x) + String(y),
          /* x */x,
          /* y */y,
          /* player */player,
          /* gamePieceState : Default */0,
          /* kingStatus : Normal */1
        ];
}

function buildBoard(param) {
  var boardRow = function (y, player) {
    return List.map((function (x) {
                  var match = x % 2;
                  var match$1 = y % 2;
                  if (match !== 0) {
                    if (match !== 1 || match$1 !== 0) {
                      return getGamePiece(x, y, /* Empty */2);
                    } else {
                      return getGamePiece(x, y, player);
                    }
                  } else if (match$1 !== 1) {
                    return getGamePiece(x, y, /* Empty */2);
                  } else {
                    return getGamePiece(x, y, player);
                  }
                }), boardSize);
  };
  return List.mapi((function (id, boardRow) {
                return /* record */[
                        /* id */id,
                        /* gamePieces */boardRow
                      ];
              }), List.map((function (y) {
                    var exit = 0;
                    if (y >= 3) {
                      if (y > 7 || y < 5) {
                        exit = 1;
                      } else {
                        return boardRow(y, /* White */0);
                      }
                    } else if (y >= 0) {
                      return boardRow(y, /* Red */1);
                    } else {
                      exit = 1;
                    }
                    if (exit === 1) {
                      return List.map((function (x) {
                                    return getGamePiece(x, y, /* Empty */2);
                                  }), boardSize);
                    }
                    
                  }), boardSize));
}

function isMoveOnBoard(param) {
  var y = param[1];
  var x = param[0];
  if (x !== -1 && y !== -1 && x !== List.length(boardSize)) {
    return y !== List.length(boardSize);
  } else {
    return false;
  }
}

function findFieldById(checkerBoard, id) {
  return List.find((function (gamePiece) {
                return id === gamePiece[/* id */0];
              }), List.flatten(List.map((function (row) {
                        return row[/* gamePieces */1];
                      }), checkerBoard)));
}

function isLegalMove(param, selX, selY, gameState, kingStatus) {
  var y = param[1];
  if (gameState.tag) {
    if (kingStatus) {
      return false;
    } else {
      return true;
    }
  } else {
    switch (gameState[0]) {
      case 0 : 
          if (kingStatus) {
            if (Caml_obj.caml_lessthan(y, selY)) {
              return true;
            } else {
              return false;
            }
          } else if (kingStatus) {
            return false;
          } else {
            return true;
          }
      case 1 : 
          if (kingStatus) {
            if (Caml_obj.caml_greaterthan(y, selY)) {
              return true;
            } else {
              return false;
            }
          } else if (kingStatus) {
            return false;
          } else {
            return true;
          }
      case 2 : 
          if (kingStatus) {
            return false;
          } else {
            return true;
          }
      
    }
  }
}

function isLandingEmpty(param, checkerBoard) {
  var id = String(param[0]) + String(param[1]);
  var foundField = findFieldById(checkerBoard, id);
  var match = foundField[/* player */3];
  return match >= 2;
}

var Logic = /* module */[
  /* range */range,
  /* boardSize */boardSize,
  /* getGamePiece */getGamePiece,
  /* buildBoard */buildBoard,
  /* isMoveOnBoard */isMoveOnBoard,
  /* findFieldById */findFieldById,
  /* isLegalMove */isLegalMove,
  /* isLandingEmpty */isLandingEmpty
];

exports.Logic = Logic;
/* boardSize Not a pure module */
